# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XBee_ext', [dirname(__file__)])
        except ImportError:
            import _XBee_ext
            return _XBee_ext
        if fp is not None:
            try:
                _mod = imp.load_module('_XBee_ext', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _XBee_ext = swig_import_helper()
    del swig_import_helper
else:
    import _XBee_ext
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XBee_ext.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _XBee_ext.SwigPyIterator_value(self)
    def incr(self, n = 1): return _XBee_ext.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _XBee_ext.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _XBee_ext.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _XBee_ext.SwigPyIterator_equal(self, *args)
    def copy(self): return _XBee_ext.SwigPyIterator_copy(self)
    def next(self): return _XBee_ext.SwigPyIterator_next(self)
    def __next__(self): return _XBee_ext.SwigPyIterator___next__(self)
    def previous(self): return _XBee_ext.SwigPyIterator_previous(self)
    def advance(self, *args): return _XBee_ext.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _XBee_ext.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _XBee_ext.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _XBee_ext.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _XBee_ext.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _XBee_ext.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _XBee_ext.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _XBee_ext.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def GetTickCount():
  return _XBee_ext.GetTickCount()
GetTickCount = _XBee_ext.GetTickCount

def getMillisecondTime():
  return _XBee_ext.getMillisecondTime()
getMillisecondTime = _XBee_ext.getMillisecondTime
class XBeeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XBeeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XBeeData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XBee_ext.new_XBeeData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XBee_ext.delete_XBeeData
    __del__ = lambda self : None;
    __swig_setmethods__["Name"] = _XBee_ext.XBeeData_Name_set
    __swig_getmethods__["Name"] = _XBee_ext.XBeeData_Name_get
    if _newclass:Name = _swig_property(_XBee_ext.XBeeData_Name_get, _XBee_ext.XBeeData_Name_set)
    __swig_setmethods__["lastSample"] = _XBee_ext.XBeeData_lastSample_set
    __swig_getmethods__["lastSample"] = _XBee_ext.XBeeData_lastSample_get
    if _newclass:lastSample = _swig_property(_XBee_ext.XBeeData_lastSample_get, _XBee_ext.XBeeData_lastSample_set)
    __swig_setmethods__["SN_High"] = _XBee_ext.XBeeData_SN_High_set
    __swig_getmethods__["SN_High"] = _XBee_ext.XBeeData_SN_High_get
    if _newclass:SN_High = _swig_property(_XBee_ext.XBeeData_SN_High_get, _XBee_ext.XBeeData_SN_High_set)
    __swig_setmethods__["SN_Low"] = _XBee_ext.XBeeData_SN_Low_set
    __swig_getmethods__["SN_Low"] = _XBee_ext.XBeeData_SN_Low_get
    if _newclass:SN_Low = _swig_property(_XBee_ext.XBeeData_SN_Low_get, _XBee_ext.XBeeData_SN_Low_set)
    __swig_setmethods__["Address16"] = _XBee_ext.XBeeData_Address16_set
    __swig_getmethods__["Address16"] = _XBee_ext.XBeeData_Address16_get
    if _newclass:Address16 = _swig_property(_XBee_ext.XBeeData_Address16_get, _XBee_ext.XBeeData_Address16_set)
    __swig_setmethods__["DigitalMask"] = _XBee_ext.XBeeData_DigitalMask_set
    __swig_getmethods__["DigitalMask"] = _XBee_ext.XBeeData_DigitalMask_get
    if _newclass:DigitalMask = _swig_property(_XBee_ext.XBeeData_DigitalMask_get, _XBee_ext.XBeeData_DigitalMask_set)
    __swig_setmethods__["AnalogMask"] = _XBee_ext.XBeeData_AnalogMask_set
    __swig_getmethods__["AnalogMask"] = _XBee_ext.XBeeData_AnalogMask_get
    if _newclass:AnalogMask = _swig_property(_XBee_ext.XBeeData_AnalogMask_get, _XBee_ext.XBeeData_AnalogMask_set)
    __swig_setmethods__["digital_data"] = _XBee_ext.XBeeData_digital_data_set
    __swig_getmethods__["digital_data"] = _XBee_ext.XBeeData_digital_data_get
    if _newclass:digital_data = _swig_property(_XBee_ext.XBeeData_digital_data_get, _XBee_ext.XBeeData_digital_data_set)
    __swig_setmethods__["analog_data"] = _XBee_ext.XBeeData_analog_data_set
    __swig_getmethods__["analog_data"] = _XBee_ext.XBeeData_analog_data_get
    if _newclass:analog_data = _swig_property(_XBee_ext.XBeeData_analog_data_get, _XBee_ext.XBeeData_analog_data_set)
    __swig_setmethods__["deviceType"] = _XBee_ext.XBeeData_deviceType_set
    __swig_getmethods__["deviceType"] = _XBee_ext.XBeeData_deviceType_get
    if _newclass:deviceType = _swig_property(_XBee_ext.XBeeData_deviceType_get, _XBee_ext.XBeeData_deviceType_set)
    __swig_setmethods__["parentAddress"] = _XBee_ext.XBeeData_parentAddress_set
    __swig_getmethods__["parentAddress"] = _XBee_ext.XBeeData_parentAddress_get
    if _newclass:parentAddress = _swig_property(_XBee_ext.XBeeData_parentAddress_get, _XBee_ext.XBeeData_parentAddress_set)
    __swig_setmethods__["sampleRate"] = _XBee_ext.XBeeData_sampleRate_set
    __swig_getmethods__["sampleRate"] = _XBee_ext.XBeeData_sampleRate_get
    if _newclass:sampleRate = _swig_property(_XBee_ext.XBeeData_sampleRate_get, _XBee_ext.XBeeData_sampleRate_set)
    __swig_setmethods__["sleepRate"] = _XBee_ext.XBeeData_sleepRate_set
    __swig_getmethods__["sleepRate"] = _XBee_ext.XBeeData_sleepRate_get
    if _newclass:sleepRate = _swig_property(_XBee_ext.XBeeData_sleepRate_get, _XBee_ext.XBeeData_sleepRate_set)
    __swig_setmethods__["timeUntilSleep"] = _XBee_ext.XBeeData_timeUntilSleep_set
    __swig_getmethods__["timeUntilSleep"] = _XBee_ext.XBeeData_timeUntilSleep_get
    if _newclass:timeUntilSleep = _swig_property(_XBee_ext.XBeeData_timeUntilSleep_get, _XBee_ext.XBeeData_timeUntilSleep_set)
    __swig_setmethods__["numberOfChildren"] = _XBee_ext.XBeeData_numberOfChildren_set
    __swig_getmethods__["numberOfChildren"] = _XBee_ext.XBeeData_numberOfChildren_get
    if _newclass:numberOfChildren = _swig_property(_XBee_ext.XBeeData_numberOfChildren_get, _XBee_ext.XBeeData_numberOfChildren_set)
    __swig_setmethods__["minimum"] = _XBee_ext.XBeeData_minimum_set
    __swig_getmethods__["minimum"] = _XBee_ext.XBeeData_minimum_get
    if _newclass:minimum = _swig_property(_XBee_ext.XBeeData_minimum_get, _XBee_ext.XBeeData_minimum_set)
    __swig_setmethods__["maximum"] = _XBee_ext.XBeeData_maximum_set
    __swig_getmethods__["maximum"] = _XBee_ext.XBeeData_maximum_get
    if _newclass:maximum = _swig_property(_XBee_ext.XBeeData_maximum_get, _XBee_ext.XBeeData_maximum_set)
    __swig_setmethods__["rxData"] = _XBee_ext.XBeeData_rxData_set
    __swig_getmethods__["rxData"] = _XBee_ext.XBeeData_rxData_get
    if _newclass:rxData = _swig_property(_XBee_ext.XBeeData_rxData_get, _XBee_ext.XBeeData_rxData_set)
    __swig_setmethods__["timeSinceLastSample"] = _XBee_ext.XBeeData_timeSinceLastSample_set
    __swig_getmethods__["timeSinceLastSample"] = _XBee_ext.XBeeData_timeSinceLastSample_get
    if _newclass:timeSinceLastSample = _swig_property(_XBee_ext.XBeeData_timeSinceLastSample_get, _XBee_ext.XBeeData_timeSinceLastSample_set)
    __swig_setmethods__["joined"] = _XBee_ext.XBeeData_joined_set
    __swig_getmethods__["joined"] = _XBee_ext.XBeeData_joined_get
    if _newclass:joined = _swig_property(_XBee_ext.XBeeData_joined_get, _XBee_ext.XBeeData_joined_set)
    def rxDataSize(self): return _XBee_ext.XBeeData_rxDataSize(self)
XBeeData_swigregister = _XBee_ext.XBeeData_swigregister
XBeeData_swigregister(XBeeData)

class ActiveClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActiveClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActiveClass, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XBee_ext.delete_ActiveClass
    __del__ = lambda self : None;
    def Resume(self): return _XBee_ext.ActiveClass_Resume(self)
    def WaitForThread(self): return _XBee_ext.ActiveClass_WaitForThread(self)
    def main(self): return _XBee_ext.ActiveClass_main(self)
    __swig_getmethods__["threadEntry"] = lambda x: _XBee_ext.ActiveClass_threadEntry
    if _newclass:threadEntry = staticmethod(_XBee_ext.ActiveClass_threadEntry)
ActiveClass_swigregister = _XBee_ext.ActiveClass_swigregister
ActiveClass_swigregister(ActiveClass)

def ActiveClass_threadEntry(*args):
  return _XBee_ext.ActiveClass_threadEntry(*args)
ActiveClass_threadEntry = _XBee_ext.ActiveClass_threadEntry

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XBee_ext.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XBee_ext.delete_Node
    __del__ = lambda self : None;
    __swig_setmethods__["data"] = _XBee_ext.Node_data_set
    __swig_getmethods__["data"] = _XBee_ext.Node_data_get
    if _newclass:data = _swig_property(_XBee_ext.Node_data_get, _XBee_ext.Node_data_set)
Node_swigregister = _XBee_ext.Node_swigregister
Node_swigregister(Node)

class NodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _XBee_ext.NodeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XBee_ext.NodeVector___nonzero__(self)
    def __bool__(self): return _XBee_ext.NodeVector___bool__(self)
    def __len__(self): return _XBee_ext.NodeVector___len__(self)
    def pop(self): return _XBee_ext.NodeVector_pop(self)
    def __getslice__(self, *args): return _XBee_ext.NodeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _XBee_ext.NodeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _XBee_ext.NodeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _XBee_ext.NodeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _XBee_ext.NodeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _XBee_ext.NodeVector___setitem__(self, *args)
    def append(self, *args): return _XBee_ext.NodeVector_append(self, *args)
    def empty(self): return _XBee_ext.NodeVector_empty(self)
    def size(self): return _XBee_ext.NodeVector_size(self)
    def clear(self): return _XBee_ext.NodeVector_clear(self)
    def swap(self, *args): return _XBee_ext.NodeVector_swap(self, *args)
    def get_allocator(self): return _XBee_ext.NodeVector_get_allocator(self)
    def begin(self): return _XBee_ext.NodeVector_begin(self)
    def end(self): return _XBee_ext.NodeVector_end(self)
    def rbegin(self): return _XBee_ext.NodeVector_rbegin(self)
    def rend(self): return _XBee_ext.NodeVector_rend(self)
    def pop_back(self): return _XBee_ext.NodeVector_pop_back(self)
    def erase(self, *args): return _XBee_ext.NodeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _XBee_ext.new_NodeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XBee_ext.NodeVector_push_back(self, *args)
    def front(self): return _XBee_ext.NodeVector_front(self)
    def back(self): return _XBee_ext.NodeVector_back(self)
    def assign(self, *args): return _XBee_ext.NodeVector_assign(self, *args)
    def resize(self, *args): return _XBee_ext.NodeVector_resize(self, *args)
    def insert(self, *args): return _XBee_ext.NodeVector_insert(self, *args)
    def reserve(self, *args): return _XBee_ext.NodeVector_reserve(self, *args)
    def capacity(self): return _XBee_ext.NodeVector_capacity(self)
    __swig_destroy__ = _XBee_ext.delete_NodeVector
    __del__ = lambda self : None;
NodeVector_swigregister = _XBee_ext.NodeVector_swigregister
NodeVector_swigregister(NodeVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _XBee_ext.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XBee_ext.IntVector___nonzero__(self)
    def __bool__(self): return _XBee_ext.IntVector___bool__(self)
    def __len__(self): return _XBee_ext.IntVector___len__(self)
    def pop(self): return _XBee_ext.IntVector_pop(self)
    def __getslice__(self, *args): return _XBee_ext.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _XBee_ext.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _XBee_ext.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _XBee_ext.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _XBee_ext.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _XBee_ext.IntVector___setitem__(self, *args)
    def append(self, *args): return _XBee_ext.IntVector_append(self, *args)
    def empty(self): return _XBee_ext.IntVector_empty(self)
    def size(self): return _XBee_ext.IntVector_size(self)
    def clear(self): return _XBee_ext.IntVector_clear(self)
    def swap(self, *args): return _XBee_ext.IntVector_swap(self, *args)
    def get_allocator(self): return _XBee_ext.IntVector_get_allocator(self)
    def begin(self): return _XBee_ext.IntVector_begin(self)
    def end(self): return _XBee_ext.IntVector_end(self)
    def rbegin(self): return _XBee_ext.IntVector_rbegin(self)
    def rend(self): return _XBee_ext.IntVector_rend(self)
    def pop_back(self): return _XBee_ext.IntVector_pop_back(self)
    def erase(self, *args): return _XBee_ext.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _XBee_ext.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XBee_ext.IntVector_push_back(self, *args)
    def front(self): return _XBee_ext.IntVector_front(self)
    def back(self): return _XBee_ext.IntVector_back(self)
    def assign(self, *args): return _XBee_ext.IntVector_assign(self, *args)
    def resize(self, *args): return _XBee_ext.IntVector_resize(self, *args)
    def insert(self, *args): return _XBee_ext.IntVector_insert(self, *args)
    def reserve(self, *args): return _XBee_ext.IntVector_reserve(self, *args)
    def capacity(self): return _XBee_ext.IntVector_capacity(self)
    __swig_destroy__ = _XBee_ext.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _XBee_ext.IntVector_swigregister
IntVector_swigregister(IntVector)

class RxData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RxData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RxData, name)
    __repr__ = _swig_repr
    def iterator(self): return _XBee_ext.RxData_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XBee_ext.RxData___nonzero__(self)
    def __bool__(self): return _XBee_ext.RxData___bool__(self)
    def __len__(self): return _XBee_ext.RxData___len__(self)
    def pop(self): return _XBee_ext.RxData_pop(self)
    def __getslice__(self, *args): return _XBee_ext.RxData___getslice__(self, *args)
    def __setslice__(self, *args): return _XBee_ext.RxData___setslice__(self, *args)
    def __delslice__(self, *args): return _XBee_ext.RxData___delslice__(self, *args)
    def __delitem__(self, *args): return _XBee_ext.RxData___delitem__(self, *args)
    def __getitem__(self, *args): return _XBee_ext.RxData___getitem__(self, *args)
    def __setitem__(self, *args): return _XBee_ext.RxData___setitem__(self, *args)
    def append(self, *args): return _XBee_ext.RxData_append(self, *args)
    def empty(self): return _XBee_ext.RxData_empty(self)
    def size(self): return _XBee_ext.RxData_size(self)
    def clear(self): return _XBee_ext.RxData_clear(self)
    def swap(self, *args): return _XBee_ext.RxData_swap(self, *args)
    def get_allocator(self): return _XBee_ext.RxData_get_allocator(self)
    def begin(self): return _XBee_ext.RxData_begin(self)
    def end(self): return _XBee_ext.RxData_end(self)
    def rbegin(self): return _XBee_ext.RxData_rbegin(self)
    def rend(self): return _XBee_ext.RxData_rend(self)
    def pop_back(self): return _XBee_ext.RxData_pop_back(self)
    def erase(self, *args): return _XBee_ext.RxData_erase(self, *args)
    def __init__(self, *args): 
        this = _XBee_ext.new_RxData(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XBee_ext.RxData_push_back(self, *args)
    def front(self): return _XBee_ext.RxData_front(self)
    def back(self): return _XBee_ext.RxData_back(self)
    def assign(self, *args): return _XBee_ext.RxData_assign(self, *args)
    def resize(self, *args): return _XBee_ext.RxData_resize(self, *args)
    def insert(self, *args): return _XBee_ext.RxData_insert(self, *args)
    def reserve(self, *args): return _XBee_ext.RxData_reserve(self, *args)
    def capacity(self): return _XBee_ext.RxData_capacity(self)
    __swig_destroy__ = _XBee_ext.delete_RxData
    __del__ = lambda self : None;
RxData_swigregister = _XBee_ext.RxData_swigregister
RxData_swigregister(RxData)

class Nodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Nodes, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XBee_ext.new_Nodes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XBee_ext.delete_Nodes
    __del__ = lambda self : None;
    __swig_setmethods__["nodes"] = _XBee_ext.Nodes_nodes_set
    __swig_getmethods__["nodes"] = _XBee_ext.Nodes_nodes_get
    if _newclass:nodes = _swig_property(_XBee_ext.Nodes_nodes_get, _XBee_ext.Nodes_nodes_set)
    def size(self): return _XBee_ext.Nodes_size(self)
Nodes_swigregister = _XBee_ext.Nodes_swigregister
Nodes_swigregister(Nodes)

MAX_BUFFER = _XBee_ext.MAX_BUFFER
DEFAULT_SAMPLE_RATE = _XBee_ext.DEFAULT_SAMPLE_RATE
MIN_SLEEP_RATE = _XBee_ext.MIN_SLEEP_RATE
MAX_SLEEP_RATE = _XBee_ext.MAX_SLEEP_RATE
MAX_SAMPLE_RATE = _XBee_ext.MAX_SAMPLE_RATE
MIN_SAMPLE_RATE = _XBee_ext.MIN_SAMPLE_RATE
MIN_TIME_UNTIL_SLEEP = _XBee_ext.MIN_TIME_UNTIL_SLEEP
MAX_TIME_UNTIL_SLEEP = _XBee_ext.MAX_TIME_UNTIL_SLEEP
DEFAULT_DISCOVERY_TIMEOUT = _XBee_ext.DEFAULT_DISCOVERY_TIMEOUT
END_DEVICE = _XBee_ext.END_DEVICE
ROUTER = _XBee_ext.ROUTER
OK = _XBee_ext.OK
class XBeeSystem(ActiveClass):
    __swig_setmethods__ = {}
    for _s in [ActiveClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XBeeSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [ActiveClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XBeeSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XBee_ext.new_XBeeSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XBee_ext.delete_XBeeSystem
    __del__ = lambda self : None;
    def initializeNetwork(self): return _XBee_ext.XBeeSystem_initializeNetwork(self)
    def stop(self): return _XBee_ext.XBeeSystem_stop(self)
    def deleteSensor(self, *args): return _XBee_ext.XBeeSystem_deleteSensor(self, *args)
    def printSensors(self): return _XBee_ext.XBeeSystem_printSensors(self)
    def getPAN_ID(self): return _XBee_ext.XBeeSystem_getPAN_ID(self)
    def read(self): return _XBee_ext.XBeeSystem_read(self)
    def setDiscoveryTimeout(self, *args): return _XBee_ext.XBeeSystem_setDiscoveryTimeout(self, *args)
    def getTimeSinceLastSample(self, *args): return _XBee_ext.XBeeSystem_getTimeSinceLastSample(self, *args)
    def ATParamSet(self, *args): return _XBee_ext.XBeeSystem_ATParamSet(self, *args)
    def RemoteATSet(self, *args): return _XBee_ext.XBeeSystem_RemoteATSet(self, *args)
    def RemoteATSetNodeID(self, *args): return _XBee_ext.XBeeSystem_RemoteATSetNodeID(self, *args)
    def Write(self, *args): return _XBee_ext.XBeeSystem_Write(self, *args)
    def RemoteATRead(self, *args): return _XBee_ext.XBeeSystem_RemoteATRead(self, *args)
    def setPAN_ID(self, *args): return _XBee_ext.XBeeSystem_setPAN_ID(self, *args)
    def doNodeDiscovery(self, *args): return _XBee_ext.XBeeSystem_doNodeDiscovery(self, *args)
    def printAnalog(self, *args): return _XBee_ext.XBeeSystem_printAnalog(self, *args)
    def printDigital(self, *args): return _XBee_ext.XBeeSystem_printDigital(self, *args)
    def getSensors(self): return _XBee_ext.XBeeSystem_getSensors(self)
    def changeAnalog(self, *args): return _XBee_ext.XBeeSystem_changeAnalog(self, *args)
    def getNumberSensors(self): return _XBee_ext.XBeeSystem_getNumberSensors(self)
    def get_regQ(self): return _XBee_ext.XBeeSystem_get_regQ(self)
    def pop_regQ(self): return _XBee_ext.XBeeSystem_pop_regQ(self)
    def changeSleepMode(self, *args): return _XBee_ext.XBeeSystem_changeSleepMode(self, *args)
    def changeSleepRate(self, *args): return _XBee_ext.XBeeSystem_changeSleepRate(self, *args)
    def changeTimeUntilSleep(self, *args): return _XBee_ext.XBeeSystem_changeTimeUntilSleep(self, *args)
    def changeSampleRate(self, *args): return _XBee_ext.XBeeSystem_changeSampleRate(self, *args)
    def changeName(self, *args): return _XBee_ext.XBeeSystem_changeName(self, *args)
    def getCoordSN_MSB(self): return _XBee_ext.XBeeSystem_getCoordSN_MSB(self)
    def getCoordSN_LSB(self): return _XBee_ext.XBeeSystem_getCoordSN_LSB(self)
    def getCoordName(self): return _XBee_ext.XBeeSystem_getCoordName(self)
    def setDefaultSampleRate(self, *args): return _XBee_ext.XBeeSystem_setDefaultSampleRate(self, *args)
    def softCommissionButtonPress(self, *args): return _XBee_ext.XBeeSystem_softCommissionButtonPress(self, *args)
    def setBaud(self, *args): return _XBee_ext.XBeeSystem_setBaud(self, *args)
    def setSerial(self, *args): return _XBee_ext.XBeeSystem_setSerial(self, *args)
    def changePinMode(self, *args): return _XBee_ext.XBeeSystem_changePinMode(self, *args)
    def queryPinMode(self, *args): return _XBee_ext.XBeeSystem_queryPinMode(self, *args)
    def enableDataLogging(self, *args): return _XBee_ext.XBeeSystem_enableDataLogging(self, *args)
    def checkLoggingStatus(self): return _XBee_ext.XBeeSystem_checkLoggingStatus(self)
    def disableDataLogging(self): return _XBee_ext.XBeeSystem_disableDataLogging(self)
    def sendRxData(self, *args): return _XBee_ext.XBeeSystem_sendRxData(self, *args)
    def forceSample(self, *args): return _XBee_ext.XBeeSystem_forceSample(self, *args)
XBeeSystem_swigregister = _XBee_ext.XBeeSystem_swigregister
XBeeSystem_swigregister(XBeeSystem)



